<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="test.dao.LoginUserDAO">
   
    <!--当出现对象的属性 与 表的列不匹配时 必须进行 resultMap配置
   
        resultMap：设置自定义的映射关系
        id：唯一标识
        type：处理映射关系的实体类的类型
        常用的标签：
        id：处理主键和实体类中属性的映射关系
        result：处理普通字段和实体类中属性的映射关系
        association：处理多对一的映射关系（处理实体类类型的属性）
        collection：处理一对多的映射关系（处理集合类型的属性）
        column：设置映射关系中的字段名，必须是sql查询出的某个字段
        property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名
    -->
   	<resultMap id="loginUserMap" type="test.entity.LoginUser">
        <id property="id" column="id" javaType="java.lang.Long" jdbcType="BIGINT"></id>
        <result property="createTime" column="CREATE_TIME" javaType="java.util.Date" jdbcType="DATE"></result>
        <result property="loginName" column="LOGIN_NAME" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="password" column="PASSWORD" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="name" column="LOGIN_NAME" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="gender" column="RGRENDER" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="email" column="EMAIL" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="mobile" column="MOBILE" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <!--
        	多对一配置
        	association  select :使用哪一个查询 以deptno为条件查询出一个Dept对象赋值给dept属性
        	fetchType : 执行本身查询时是否会立即执行关联查询 多端建议使用 eager
		        关联的嵌套 Select 查询
		    问题：
		        这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的：
		            你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。
		            对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。
		    解决：
		        MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。
		        （例如： 我需要dept这个对象的时候就会进行加载，如果不需要就不会立即加载（延迟加载））
		         然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。
  		    建议：采用将结果直接映射 到实体类中，执行一次联合查询 ，一般情况下比 效率比第一种 速度更高，但关联表过多和复杂时，需要进行测试
  	  -->
        
        <association property="department" column="DEPARTMENT_ID"  javaType="test.entity.Department" jdbcType="BIGINT">
        	<id property="id" column="did"/>
            <result property="name" column="dname"/>
            <result property="description" column="description"/>
        </association>
 
    </resultMap>
   
    <!--select查询语句-->
    <select id="getUserList"  resultType="test.entity.LoginUser" resultMap="loginUserMap">
        select u.*,d.id as did,d.name as dname,d.description as description from ibatis_login_user as u left join ibatis_department as d on u.DEPARTMENT_ID=d.id  
    </select>
   
    <select id="getUser" parameterType="Long" resultType="test.entity.LoginUser" resultMap="loginUserMap">
        select u.*,d.id as did,d.name as dname,d.description as description from ibatis_login_user as u left join ibatis_department as d on u.DEPARTMENT_ID=d.id  where u.id=#{id}
    </select>
    
    <select id="findUsersByName" parameterType="String" resultType="test.entity.LoginUser" resultMap="loginUserMap">
        select u.*,d.id as did,d.name as dname,d.description as description from ibatis_login_user as u left join ibatis_department as d on u.DEPARTMENT_ID=d.id  where u.name like "%"#{userName}"%"
    </select>
    
    <select id="findUserByName" parameterType="String" resultType="test.entity.LoginUser" resultMap="loginUserMap">
        select u.*,d.id as did,d.name as dname,d.description as description from ibatis_login_user as u left join ibatis_department as d on u.DEPARTMENT_ID=d.id  where u.name = ""#{userName}""
    </select>
    
    <insert id="addUser" parameterType="test.entity.LoginUser" keyProperty="id" useGeneratedKeys="true">
    	INSERT INTO ibatis_login_user(CREATE_TIME,EMAIL,RGRENDER,LOGIN_NAME,MOBILE,NAME,PASSWORD,DEPARTMENT_ID)
    	VALUES(#{createTime},#{email},#{gender},#{loginName},#{mobile},#{name},#{password},#{department.id})
    </insert>
</mapper>
